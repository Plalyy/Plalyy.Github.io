<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Plalyy</title>
  <icon>https://www.gravatar.com/avatar/727063e33fd1a1120f157a9d4f8c65fc</icon>
  <subtitle>选择热爱 热爱选择</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-26T01:39:46.141Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Plalyy</name>
    <email>plalyy199@sina.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Edu94-E.Clear the Multiset</title>
    <link href="http://yoursite.com/2020/08/26/Edu94-E.Clear%20the%20Multiset/"/>
    <id>http://yoursite.com/2020/08/26/Edu94-E.Clear%20the%20Multiset/</id>
    <published>2020-08-26T01:02:46.000Z</published>
    <updated>2020-08-26T01:39:46.141Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;好久没有动博客了，顺手写一下吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;题意：给定1-n每个数的数量，一种操作是区间$[L,R]$内每个数减一，另一种是针对一个数减任意，问使得清空的最小操作数。&lt;/p&gt;
&lt;p&gt;在一个连续区间内，要么每个单独去掉，要么先去掉最大共同高度，再重新考虑对子区间操作。这就是所谓的分治？….&lt;/p&gt;
&lt;p&gt;忘掉了出现次数可以为0，最后判断时直接与n取min了，然后被hack掉了，在dfs中其实可以改成考虑非0连续区间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="codeforces" scheme="http://yoursite.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>不要感动自己</title>
    <link href="http://yoursite.com/2020/08/07/%E4%B8%8D%E8%A6%81%E6%84%9F%E5%8A%A8%E8%87%AA%E5%B7%B1/"/>
    <id>http://yoursite.com/2020/08/07/%E4%B8%8D%E8%A6%81%E6%84%9F%E5%8A%A8%E8%87%AA%E5%B7%B1/</id>
    <published>2020-08-07T02:30:47.000Z</published>
    <updated>2020-08-07T03:10:44.014Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近有点好。&lt;/p&gt;
&lt;p&gt;好在队友杰哥和锋哥哥真的好强，带我一步一步往上爬，好在有这些朋友，无私多帮我解决一些问题。想起来这些的时候，我是很想笑的，觉得自己好幸运。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Go running 二分图匹配（最大流</title>
    <link href="http://yoursite.com/2020/07/30/Go%20running%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%EF%BC%88%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    <id>http://yoursite.com/2020/07/30/Go%20running%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%EF%BC%88%E6%9C%80%E5%A4%A7%E6%B5%81/</id>
    <published>2020-07-30T12:30:49.000Z</published>
    <updated>2020-07-30T13:01:20.187Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;题意：每个人从开始运动时起，选择左或者右方向每秒前进1m，现给出n个监控，表示在某时间某位置有人运动，问最少多少人运动。&lt;/p&gt;
&lt;p&gt;按时间和位置建立坐标系，人的运动被表示成斜率为 1 或 -1 的直线，而监控点则说明该点有直线经过，所以问题就转化成用最少的直线去覆盖所有的点。联想到按行和列做二分图匹配最小点覆盖，所以尝试将该图旋转45度，发现正好满足，于是想尝试二分匹配。&lt;/p&gt;
&lt;p&gt;一开始纠结于建边复杂度，后来发现是想错了，考虑到之前似乎说Dinic二分图能跑到$O(m\sqrt n)$ ，于是考虑如何建图。旋转45°去考虑点的关系有点麻烦，所以直接根据斜率和坐标得到 斜率-1对应的纵截距 b1 ，斜率1对应纵截距 b2，将不同的纵截距作为点，其实也就是旋转后对应的横纵坐标。&lt;/p&gt;
&lt;p&gt;全部边权设为1，跑最大流，就能得到结果。&lt;/p&gt;
&lt;p&gt;和这道题挺像的 &lt;a href=&quot;https://vjudge.net/problem/10535/origin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;POJ - 3041 &lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>两道最短路</title>
    <link href="http://yoursite.com/2020/07/30/%E4%B8%A4%E9%81%93%E6%9D%82%E9%A2%98/"/>
    <id>http://yoursite.com/2020/07/30/%E4%B8%A4%E9%81%93%E6%9D%82%E9%A2%98/</id>
    <published>2020-07-30T12:10:41.000Z</published>
    <updated>2020-07-30T13:02:26.162Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="最短路" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>New Equipments-费用流</title>
    <link href="http://yoursite.com/2020/07/25/New%20Equipments-%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    <id>http://yoursite.com/2020/07/25/New%20Equipments-%E8%B4%B9%E7%94%A8%E6%B5%81/</id>
    <published>2020-07-25T02:49:38.000Z</published>
    <updated>2020-07-25T03:06:32.868Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;HDU2020（2） 1005-New Equipments&lt;/p&gt;
&lt;p&gt;题意：m个机器，n个人，$i-th$人花费为 $a_ij^2+b_ij+c_i$ ，保证 $b_i^2\leq4a_ic_i$ ，分别求 $k$ 个匹配的最小花费$(1\leq k\leq n)$ &lt;/p&gt;
&lt;p&gt;分别求n个匹配，可以令每一条边的容量为1，每次分层找一个匹配，n次分层就可以实现。因为要保证n对匹配必须存在，所以保证每个人至少要有n个较优匹配，最后才能保证达到完美匹配。观察到为开口向上二次函数，可以通过三分找到最优解，然后两边拓展出 $n-1$ 个次优解，三分拓展时可以开一个map标记序号，最后建图跑费用流。补题的时候WA到自闭，以为是分层要改，最后发现是中间有个变量爆 int 了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>ACM Computer Factory 最大流输出路经</title>
    <link href="http://yoursite.com/2020/07/17/ACM%20Computer%20Factory%20%E6%9C%80%E5%A4%A7%E6%B5%81%E8%BE%93%E5%87%BA%E8%B7%AF%E7%BB%8F/"/>
    <id>http://yoursite.com/2020/07/17/ACM%20Computer%20Factory%20%E6%9C%80%E5%A4%A7%E6%B5%81%E8%BE%93%E5%87%BA%E8%B7%AF%E7%BB%8F/</id>
    <published>2020-07-17T02:39:27.000Z</published>
    <updated>2020-07-25T03:07:22.159Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ACM-Computer-Factory-POJ-3436&quot;&gt;&lt;a href=&quot;#ACM-Computer-Factory-POJ-3436&quot; class=&quot;headerlink&quot; title=&quot;ACM Computer Factory POJ-3436&quot;&gt;&lt;/a&gt;ACM Computer Factory &lt;a href=&quot;http://poj.org/problem?id=3436&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;POJ-3436&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;这道题是入门题吧，然而还是到处出现小毛病，我太蠢了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;：给定 n 个机器，每个机器可以输入原件加工，然后输出原件。机器针对原件输入时会有P个状态，0表示该状态不能存在，1表示必须存在，2表示都可以；针对原件输出也有P个状态，0表示状态无，1表示有。当原件的P个状态全部满足时，才成为成品。给定单位时间每个机器的容量，问单位时间最多生产多少成品，并输出原件加工的路径。&lt;/p&gt;
&lt;p&gt;首先是一个建图，首先想到要拆成输入点和输出点，中间边权值为单位流量，好像有不拆点的也莽过去了，感觉有点问题。然后给定输入输出的P个状态，其实类似于插头，两者匹配就可以连线，某机器的输出连接另一机器的输入，容量为两个机器容量的最小值。当状态全为0时连源点，全为1时连汇点，流量设为INF。然后跑一遍，最大流就出来了。&lt;/p&gt;
&lt;p&gt;然后是输出路径，加工的路径肯定是在 1 ~ n 个机器之间的。因为求最大流时边关系不变，变的只是剩余容量，所以开一个V[]数组提前备份一下 Val[] 容量。跑完最大流之后，枚举每个输出设备到输入设备的边，若 V[] &amp;gt; 0 且 V[] &amp;gt; Val[] ，说明经过这条边，记录下来。 注意，题目要求的是机器之间的路径，不需要考虑源点、汇点。&lt;/p&gt;
&lt;p&gt;总之很水，自己太蠢了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>K-Keyboard Free辛普森积分</title>
    <link href="http://yoursite.com/2020/07/16/%E8%BE%9B%E6%99%AE%E6%A3%AE%E7%A7%AF%E5%88%86/"/>
    <id>http://yoursite.com/2020/07/16/%E8%BE%9B%E6%99%AE%E6%A3%AE%E7%A7%AF%E5%88%86/</id>
    <published>2020-07-16T01:41:32.000Z</published>
    <updated>2020-07-16T07:12:44.417Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;牛客多校第二场的计算几何题&lt;/p&gt;
&lt;h5 id=&quot;题意：&quot;&gt;&lt;a href=&quot;#题意：&quot; class=&quot;headerlink&quot; title=&quot;题意：&quot;&gt;&lt;/a&gt;题意：&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;给定三个同心圆，不同圆上取一点，求三点构成三角形的期望面积。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;圆上求期望，得出相应的公式然后求积分，不过积分太复杂了，抄了一下辛普森积分，然后发现竟然可以枚举圆上1000个点做，太强了。先抄一下辛普森积分的使用吧。&lt;/p&gt;
&lt;h5 id=&quot;辛普森公式：&quot;&gt;&lt;a href=&quot;#辛普森公式：&quot; class=&quot;headerlink&quot; title=&quot;辛普森公式：&quot;&gt;&lt;/a&gt;辛普森公式：&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;将函数近似成二次函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$\int_a^bf(x)dx\approx \int_a^b(Ax^2+Bx+C)dx$&lt;/p&gt;
&lt;p&gt;$\int_a^bf(x)dx\approx \frac{(b-1)(f(a)+f(b)+4f(\frac{a+b}{2}))}{6}$&lt;/p&gt;
&lt;p&gt;$b-a$ 的值越小，两式越接近&lt;/p&gt;
&lt;h5 id=&quot;自适应辛普森：&quot;&gt;&lt;a href=&quot;#自适应辛普森：&quot; class=&quot;headerlink&quot; title=&quot;自适应辛普森：&quot;&gt;&lt;/a&gt;自适应辛普森：&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;自动控制区间大小长度，把积分区间拆成多个小区间后求和&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于函数 $Simpson(L, R, Ans)$&lt;/p&gt;
&lt;p&gt;先取 $mid=\frac{L+R}{2}$ ，使用上述辛普森公式近似计算左、右区间积分 $Ls$ 和 $Rs$ ，以及整个区间的积分 $S$&lt;/p&gt;
&lt;p&gt;如果 $Ls+Rs$ 与 $S$ 的误差范围允许，则返回 $S$&lt;/p&gt;
&lt;p&gt;否则返回递归 $Simpson(L,mid,Ls)+Simpson(mid,R,Rs)$&lt;/p&gt;
&lt;p&gt;注意，误差范围 $eps$ 过小会导致超时。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="计算几何" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>最短路-k条路免费</title>
    <link href="http://yoursite.com/2020/07/15/%E6%9C%80%E7%9F%AD%E8%B7%AF-k%E6%9D%A1%E8%B7%AF%E5%85%8D%E8%B4%B9/"/>
    <id>http://yoursite.com/2020/07/15/%E6%9C%80%E7%9F%AD%E8%B7%AF-k%E6%9D%A1%E8%B7%AF%E5%85%8D%E8%B4%B9/</id>
    <published>2020-07-15T09:37:04.000Z</published>
    <updated>2020-07-15T10:28:35.804Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;突然觉得想标题也是一个麻烦的事情，要不以后还是题目标题+概括方法吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;：在1到N的路径上，可以指定将不超过K条边的权值设为0，总花费为剩下边中，权值最大边对应的值。&lt;/p&gt;
&lt;p&gt;分析：关于这道题，暂时想到了二分，二维保存状态，看了题解说可以分层图处理，不过这道题层数有点多，就先写下前两种做法，再换一道例题练练分层图。&lt;/p&gt;
&lt;p&gt;① 易知路径小于K条边，花费为0。大于K条边时，总花费即为第K+1大的边权值，目的是令最大值最小，可以想到二分花费，check函数就是检查路经中大于该花费的边数 $\leq K$ , 因为最优的其实并不一定为真正意义上的最短路，所以用BFS去检查，用一个 deque 来维护大于和小于该花费的结点，由于BFS是逐层（递增）的，因而对于小于的放前面，大于的放后面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="最短路" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>对偶图-状态转移</title>
    <link href="http://yoursite.com/2020/07/14/%E5%AF%B9%E5%81%B6%E5%9B%BE-%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB/"/>
    <id>http://yoursite.com/2020/07/14/%E5%AF%B9%E5%81%B6%E5%9B%BE-%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB/</id>
    <published>2020-07-14T08:42:03.000Z</published>
    <updated>2020-07-14T08:49:59.159Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;牛客多校第二场的网络流，比赛时都没关注这道题…….&lt;/p&gt;
&lt;p&gt;简单看了对偶图的例子 狼抓兔子，然后来做这道题。一开始也是画来画去做对偶图，后来发现其实不用那么麻烦，针对原本的隔断方式进行连点更加简便。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/5667/I&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;I - Interval&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题意：初始区间 $[1, n]$ ,给m个禁止规则，禁止左端点+1，或禁止右端点-1，每个禁止都有相应花费，问避免出现$L=R$ 情况出现的最小花费。&lt;/p&gt;
&lt;p&gt;看成阻断两个状态转移，即求一下最小割，这道题把区间看成坐标，在网格图中对偶图最短路求最小割就很显然了。（事后诸葛&lt;/p&gt;
&lt;p&gt;图上有 n*n个点，可以假设每个点都对应一个对偶图的点，这样在读取禁止规则后，可以直接根据规则所说的端点变化进行对偶图点的连边。而且预先处理越界的点分别对应起点、终点，加边的时候就不用分类讨论。&lt;/p&gt;
&lt;p&gt;这道题每条边最大花费1e6，开ll吧，我小细节WA了好久。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>对偶图-狼抓兔子</title>
    <link href="http://yoursite.com/2020/07/14/%E5%AF%B9%E5%81%B6%E5%9B%BE-%E7%8B%BC%E6%8A%93%E5%85%94%E5%AD%90/"/>
    <id>http://yoursite.com/2020/07/14/%E5%AF%B9%E5%81%B6%E5%9B%BE-%E7%8B%BC%E6%8A%93%E5%85%94%E5%AD%90/</id>
    <published>2020-07-14T02:47:58.000Z</published>
    <updated>2020-07-14T03:19:20.475Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;最小割-对偶图最短路&quot;&gt;&lt;a href=&quot;#最小割-对偶图最短路&quot; class=&quot;headerlink&quot; title=&quot;最小割=对偶图最短路&quot;&gt;&lt;/a&gt;最小割=对偶图最短路&lt;/h5&gt;&lt;p&gt;处理最小割问题时，考虑到时限，可以转为对偶图做&lt;/p&gt;
&lt;p&gt;来道例题 &lt;a href=&quot;https://www.luogu.com.cn/problem/P4001&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;狼抓兔子&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题意：封锁一条边的花费等于流量，问最小花费使得左上角无法到达右下角&lt;/p&gt;
&lt;img src=&quot;/2020/07/14/%E5%AF%B9%E5%81%B6%E5%9B%BE-%E7%8B%BC%E6%8A%93%E5%85%94%E5%AD%90/1.png&quot;&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>贝塔函数和伽马函数</title>
    <link href="http://yoursite.com/2020/07/13/%E8%B4%9D%E5%A1%94%E5%87%BD%E6%95%B0%E5%92%8C%E4%BC%BD%E9%A9%AC%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/07/13/%E8%B4%9D%E5%A1%94%E5%87%BD%E6%95%B0%E5%92%8C%E4%BC%BD%E9%A9%AC%E5%87%BD%E6%95%B0/</id>
    <published>2020-07-13T00:36:18.000Z</published>
    <updated>2020-07-14T03:19:36.641Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;牛客一的 J 题我们先是想组合数，后面自己推公式做的，积分都好久没碰了所以耽误了很久，看到大家都秒了太强啦。赛后听人说除了查OEIS外，还有个贝塔函数的东西，附带加个伽马函数，分别是欧拉第一、第二积分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h5 id=&quot;贝塔函数&quot;&gt;&lt;a href=&quot;#贝塔函数&quot; class=&quot;headerlink&quot; title=&quot;贝塔函数&quot;&gt;&lt;/a&gt;贝塔函数&lt;/h5&gt;&lt;p&gt;对于任意实数 $P,Q&amp;gt;0$,  $B（a,b）=\int_0^1x^{a-1}*(1-x)^{b-1}dx$&lt;/p&gt;
&lt;p&gt;满足对称性:  $B(a,b)=B(b,a)$&lt;/p&gt;
&lt;p&gt;$a,b$ 同为自然数时， $B(a,b)=\frac{(a-1)!*(b-1)!}{(a+b-1)!}$&lt;/p&gt;
&lt;p&gt;$a,b$ 同为正整数时， $B(a,b)=\frac{a+b}{ab C_{a+b}^{a}} =\frac{1}{bC_{a+b-1}^{a-1} }$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;伽马函数&quot;&gt;&lt;a href=&quot;#伽马函数&quot; class=&quot;headerlink&quot; title=&quot;伽马函数&quot;&gt;&lt;/a&gt;伽马函数&lt;/h5&gt;&lt;p&gt;实数域 $α&amp;gt;0$ , $Γ(α)=\int_0^{+∞}x^{α-1}e^{-x}dx$ ，另一种写法  $Γ(x)=2\int_0^{+∞}t^{2x-1}e^{-t^2}dt$&lt;/p&gt;
&lt;p&gt;对于 $x∈(0,1)$ , $Γ(1-x)Γ(x)=\frac{Π}{sin{Πx}}$&lt;/p&gt;
&lt;p&gt;$Γ(α+1)=αΓ(α)$  ,  $Γ(1)=1$  ,  $Γ(\frac{1}{2})=\sqrtΠ$   ,  $Γ(n+1)=n!$&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>树形DP-树上点最远距离</title>
    <link href="http://yoursite.com/2020/07/11/%E6%A0%91%E5%BD%A2DP-%E6%A0%91%E4%B8%8A%E7%82%B9%E6%9C%80%E8%BF%9C%E8%B7%9D%E7%A6%BB/"/>
    <id>http://yoursite.com/2020/07/11/%E6%A0%91%E5%BD%A2DP-%E6%A0%91%E4%B8%8A%E7%82%B9%E6%9C%80%E8%BF%9C%E8%B7%9D%E7%A6%BB/</id>
    <published>2020-07-11T09:11:18.000Z</published>
    <updated>2020-07-11T10:20:17.593Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;仍然在往门里钻 , 写题解是希望重新审视一下细节，可能有亿点点乱。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;POJ-2196-Computer&quot;&gt;&lt;a href=&quot;#POJ-2196-Computer&quot; class=&quot;headerlink&quot; title=&quot;POJ 2196 Computer&quot;&gt;&lt;/a&gt;POJ 2196 Computer&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;题意：一棵树，对于每个结点求出其他点与它最远的距离。&lt;/p&gt;
&lt;p&gt;之前做最远距离时，利用的是树的直径，这次看到该题，发现树形DP也不失为一个好办法，所以想了树形DP的解法。某点的最长距离，很容易想到是到其子树最长距离+该点为根时另外子树最远距离。&lt;/p&gt;
&lt;p&gt;所以设 $dp[i][j],1\leq i\leq n,j=0,1$ , j 的值表示上述两种子树的状态。&lt;/p&gt;
&lt;p&gt;原子树深度由常规的dfs就可以求出，借下来考虑如何求另外部分。所指的另外部分，如下图，也就是该节点父结点及其另外部分，因而，该点的 $dp[2][1]$可以由父结点更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>树形DP入门题</title>
    <link href="http://yoursite.com/2020/07/11/%E6%A0%91%E5%BD%A2DP%E5%85%A5%E9%97%A8%E9%A2%98/"/>
    <id>http://yoursite.com/2020/07/11/%E6%A0%91%E5%BD%A2DP%E5%85%A5%E9%97%A8%E9%A2%98/</id>
    <published>2020-07-11T02:13:00.000Z</published>
    <updated>2020-07-11T06:51:33.333Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前遇到的树形DP，做的都不清楚，重新入下门，希望成功。&lt;/p&gt;
&lt;p&gt;挑几道例题入门，太过类似的就算了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;POJ-2342-没有上司的舞会&quot;&gt;&lt;a href=&quot;#POJ-2342-没有上司的舞会&quot; class=&quot;headerlink&quot; title=&quot;POJ 2342 没有上司的舞会&quot;&gt;&lt;/a&gt;POJ 2342 没有上司的舞会&lt;/h4&gt;&lt;p&gt;题意：公司成员参加舞会，每人都有一个快乐值，成员和直属上司不能同时参加，问如何使得快乐值最大。&lt;/p&gt;
&lt;p&gt;显然$dp[i][j]$表示成员 $i$子树(参加与否)达到的最大值。&lt;/p&gt;
&lt;p&gt;$dp[i][0]=\sum max(dp[j][1],dp[j][0])$, j 为子成员&lt;/p&gt;
&lt;p&gt;$dp[i][1]=\sum dp[j][0]$, j 为子成员&lt;/p&gt;
&lt;p&gt;从根节点开始。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>异或前缀和</title>
    <link href="http://yoursite.com/2020/07/11/%E5%BC%82%E6%88%96%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <id>http://yoursite.com/2020/07/11/%E5%BC%82%E6%88%96%E5%89%8D%E7%BC%80%E5%92%8C/</id>
    <published>2020-07-11T01:19:10.000Z</published>
    <updated>2020-07-11T09:46:45.176Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之后更新部分异或/前缀和的题目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;小AA的数列&quot;&gt;&lt;a href=&quot;#小AA的数列&quot; class=&quot;headerlink&quot; title=&quot;小AA的数列&quot;&gt;&lt;/a&gt;小AA的数列&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;题意：求数列所有长度为偶数且在$[L,R]$之间的区间异或和之和&lt;/p&gt;
&lt;p&gt;显然是异或前缀，按位算贡献，问题是如何处理偶数长度和区间限制。然后开始找规律，首先$sum[R-L]=sum[R]\bigoplus sum[L-1]$，针对二进制每位，当前位值为1时，要找此前位为0的数，为0时同理，这样才能产生贡献。所以针对位值，有一个取反的规律，而针对下标，同奇同偶。所以考虑针对每一个右端点，记录此前产生的贡献，并更新贡献。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="前缀和" scheme="http://yoursite.com/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>删数求前缀-奇怪的名字</title>
    <link href="http://yoursite.com/2020/07/09/%E5%88%A0%E6%95%B0%E6%B1%82%E5%89%8D%E7%BC%80-%E5%A5%87%E6%80%AA%E7%9A%84%E5%90%8D%E5%AD%97/"/>
    <id>http://yoursite.com/2020/07/09/%E5%88%A0%E6%95%B0%E6%B1%82%E5%89%8D%E7%BC%80-%E5%A5%87%E6%80%AA%E7%9A%84%E5%90%8D%E5%AD%97/</id>
    <published>2020-07-08T16:25:23.000Z</published>
    <updated>2020-07-11T09:46:21.038Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://vjudge.net/contest/381578#problem/G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HDU2019多校第三场 G - Find the answer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题意：给定长为n的序列以及整数m，对于位置 i ，可以令 k (k &amp;lt; i)位置的数变为0，使得这段前缀和小于等于m，求每个位置的最小改变数。&lt;/p&gt;
&lt;p&gt;分析：求最小改变数，也就是尽可能多使用原数，搞一个multiset和一个sum，处理一下进出元素。multiset存可以使用的元素，sum为堆中元素贡献。假如sum+a[i]&amp;lt;=m，插入元素，否则从堆里开始假删除（后面每次是独立的，不能影响后续），当满足合法后若a[i]&amp;lt;max，那么将两个元素互换，很显然次数不变的情况下sum越小越好。同理，用线段树维护子集也可以。&lt;/p&gt;
&lt;p&gt;必须要有n个空格+换行！不然PE&lt;/p&gt;
&lt;p&gt;CF #568 Div.2小数据题  &lt;a href=&quot;https://codeforces.com/contest/1185/problem/C2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C2. Exam in BerSU (hard version)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>XIU-微信小程序</title>
    <link href="http://yoursite.com/2020/06/15/XIU-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/06/15/XIU-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2020-06-15T14:27:42.000Z</published>
    <updated>2020-06-30T12:29:57.003Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;微信小程序比赛提交过作品了，这里简单回顾一下。&quot;&gt;&lt;a href=&quot;#微信小程序比赛提交过作品了，这里简单回顾一下。&quot; class=&quot;headerlink&quot; title=&quot;微信小程序比赛提交过作品了，这里简单回顾一下。&quot;&gt;&lt;/a&gt;微信小程序比赛提交过作品了，这里简单回顾一下。&lt;/h3&gt;&lt;p&gt;XIU 修小善  校园维修助手&lt;/p&gt;
&lt;p&gt;核心基本是订单的增删改查，地址管理，还加了点别的功能&lt;/p&gt;
&lt;p&gt;感谢三位队友&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;之前看到微信小程序大赛的广告，想着给mm做一个挺不错，那要不先搞一下这个积累点经验？ &lt;/p&gt;
&lt;p&gt;我转发给了外校的高ZK，他又拉了两个学长Y和C，组成了队伍。这个组队的效率真的蛮高的，然后当天的晚上，我们就基本确定了方向以及分工，做一个校内电子产品维修类的小程序，灵感来自于Y学长在校期间曾在电子社团张罗过类似的事。我和C学长负责一下交互还有数据库相关的，高负责页面，Y学长统筹。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂" scheme="http://yoursite.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>序列自动机</title>
    <link href="http://yoursite.com/2020/06/12/%E5%BA%8F%E5%88%97%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>http://yoursite.com/2020/06/12/%E5%BA%8F%E5%88%97%E8%87%AA%E5%8A%A8%E6%9C%BA/</id>
    <published>2020-06-12T12:01:03.000Z</published>
    <updated>2020-07-08T15:59:41.409Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;补题，学一下序列自动机，看了 &lt;a href=&quot;https://blog.csdn.net/weixin_30568715/article/details/96500133?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;序列自动机总结与例题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说白了就是一个二维数组 $nxt[i][j]$ ，对于字符集 $a$, $|s|=n$ , $nxt[i][j]$表示$i$ 以后第一个字符 $j$ 的位置，0为根节点，建图即 $DAG$ 。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n ; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ; i ++ )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ; j &amp;lt;= a ; j ++ )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nxt[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][j] = nxt[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nxt[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][s[i]] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以想到的用处：&lt;/p&gt;
&lt;p&gt;​        1.判断是否是原字符串的子序列&lt;/p&gt;
&lt;p&gt;​        2.求子序列个数&lt;/p&gt;
&lt;p&gt;​        3.求两串的公共子序列个数&lt;/p&gt;
&lt;p&gt;​        4.求串的回文子序列个数&lt;/p&gt;
&lt;p&gt;​        5.求一个$A,B$的最长公共子序列$S$，使得$C$是的子序列&lt;/p&gt;
&lt;p&gt;//代码还没搬上来&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>随便说说</title>
    <link href="http://yoursite.com/2020/05/27/%E9%9A%8F%E4%BE%BF%E8%AF%B4%E8%AF%B4/"/>
    <id>http://yoursite.com/2020/05/27/%E9%9A%8F%E4%BE%BF%E8%AF%B4%E8%AF%B4/</id>
    <published>2020-05-27T11:28:47.000Z</published>
    <updated>2020-05-31T05:26:21.821Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;UPD 5-31: 昨晚梦到在禁区前，用很难想到的熟练度勾回了球并借势踢了一脚，但还是绵软无力。其实可以跟上再补射的，但梦里我静止看着球的轨迹，它好歹是进了。球踢出去，其实还是自己的，有跟上的可能，你总是要跟的。前几天说的以下，部分是短暂的想法，这不，几天时间就又改了。好好努力，好好前进，还有又想回绿茵了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;最近有点崩，好像是全方面的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;春季学期，念着冬季的复习，吐槽着当前的课程，就这样一直拖到了现在。大概想想，就知道自己确确实实浪费了好多时间，做了很多无营养的事，计组一点都不会，离散数据结构靠灵感，概率论靠那么一点底子，英语没达到之前的初衷，炒股课也是水了过去，日本文学名篇也没沉下心看过几本书。&lt;/p&gt;
&lt;p&gt;随便说点想法吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>H.pair数位DP</title>
    <link href="http://yoursite.com/2020/05/22/H-pair%E6%95%B0%E4%BD%8DDP/"/>
    <id>http://yoursite.com/2020/05/22/H-pair%E6%95%B0%E4%BD%8DDP/</id>
    <published>2020-05-22T09:36:18.000Z</published>
    <updated>2020-06-12T09:27:43.015Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;H-pair-数位DP&quot;&gt;&lt;a href=&quot;#H-pair-数位DP&quot; class=&quot;headerlink&quot; title=&quot;H.pair 数位DP&quot;&gt;&lt;/a&gt;H.pair 数位DP&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;题意：给定三个整数A,B,C，求数对个数$(1\leq x\leq A,1\leq y\leq B)$,至少满足以下一个条件：&lt;/p&gt;
&lt;p&gt;$(x $ $and$ $y)&amp;gt;C$&lt;/p&gt;
&lt;p&gt;$(x $ $xor$ $y)&amp;lt;C$&lt;/p&gt;
&lt;p&gt;想了好久，转成二进制按位计数，会不会是数位DP，跟杰哥锋哥哥说了下，应该是，然后就去百度学习数位DP了，拉出来不要62的AC代码开始魔改。三维变五维又变七维，最后在锋哥哥的帮助下终于过了。&lt;/p&gt;
&lt;p&gt;从高位到低位数位DP，其考虑的范围是$(0\leq x\leq A,0\leq y\leq B)$，跟题目要求不同，要注意这里产生的非法情况，大概两种做法吧：&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>最近题目</title>
    <link href="http://yoursite.com/2020/05/21/%E6%9C%80%E8%BF%91%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2020/05/21/%E6%9C%80%E8%BF%91%E9%A2%98%E7%9B%AE/</id>
    <published>2020-05-21T07:43:00.000Z</published>
    <updated>2020-05-22T09:58:19.114Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0-最近&quot;&gt;&lt;a href=&quot;#0-最近&quot; class=&quot;headerlink&quot; title=&quot;0.最近&quot;&gt;&lt;/a&gt;0.最近&lt;/h3&gt;&lt;p&gt;前几天比赛挺多的，也挺自闭，补题有点慢了，尤其那个线段树专场搞的我有点崩溃，让自己怀疑是不是这块的料，还是好好调整下心态吧。&lt;/p&gt;
&lt;h3 id=&quot;1-焦作站B题&quot;&gt;&lt;a href=&quot;#1-焦作站B题&quot; class=&quot;headerlink&quot; title=&quot;1.焦作站B题&quot;&gt;&lt;/a&gt;1.焦作站B题&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102028/problem/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B. Ultraman vs. Aodzilla and Bodzilla&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;题意：作为勇士的锋gg要跟怪兽A、B进行回合式战斗，锋gg每次只能攻击一只怪兽但被两只怪兽攻击，锋gg第 $i$ 回合的伤害为 $i $，请给出最优的攻击序列，要求使锋gg受到最小的伤害且同样伤害的情况下序列的字典序最小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;del&gt;比赛的时候李哥还是锋gg读了一下题，然后我们就没来得及做了。&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回合式战斗要想受到最小的伤害，一是优先解决部分怪兽，二是尽可能快速解决战斗。所以分为优先解决A还是B两种情况，然后保证回合数最小。先预处理下伤害值 sum[ ] ，因为每天的伤害值是公差为1的等差数列，所以根据lower_bound( HA+HB )确定回合数一定是最优的回合数，不受伤害溢出之类情况的影响，然后具体分析。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
</feed>
